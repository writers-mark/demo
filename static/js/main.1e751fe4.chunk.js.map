{"version":3,"sources":["tmp.js","App.js","index.js"],"names":["WritersMarkRuleInjector","props","React","createStyleElement","style","sheet","newRules","onRulesChanged","document","head","removeChild","WritersMarkSection","content","contents","className","rules","map","s","WritersMarkParagraph","p","compileParagraph","classes","styles","join","WritersMarkRaw","setRules","paragraphs","splitParagraphs","wm","options","i","App","setContent","setStyle","value","onChange","e","target","ReactDOM","render","StrictMode","getElementById"],"mappings":"mNAOMA,EAA0B,SAACC,GAU/B,OATAC,aAAgB,WAAO,IAAD,EACMC,6BAAmBF,EAAMG,OAD/B,mBACbC,EADa,KACNC,EADM,KAIpB,OAFAL,EAAMM,eAAeD,GAEd,WACLE,SAASC,KAAKC,YAAYL,MAE3B,CAACJ,EAAMG,QAEH,8BAGHO,EAAqB,SAArBA,EAAsBV,GAC1B,GAAIA,EAAMW,QAAQC,UAAYZ,EAAMW,QAAQR,MAAO,CACjD,IAAIU,EAAY,GAKhB,OAJIb,EAAMc,QACRD,EAAYb,EAAMc,MAAM,KAAOd,EAAMW,QAAQR,QAI7C,sBAAMU,UAAWA,EAAjB,SACGb,EAAMW,QAAQC,SAASG,KAAI,SAAAC,GAAC,OAAE,cAACN,EAAD,CAAoBC,QAASK,EAAGF,MAAOd,EAAMc,aAIhF,OAAOd,EAAMW,SAIXM,EAAuB,SAACjB,GAC5B,IAAMkB,EAAIjB,WAAc,kBAAIkB,2BAAiBnB,EAAMW,QAASX,EAAMG,SAAQ,CAACH,EAAMG,MAAOH,EAAMW,UAE1FS,EAAU,GAQd,OAPIpB,EAAMc,OAASI,EAAEG,OACnBD,EAAUF,EAAEG,OAAON,KAAI,SAACC,GAAD,OAAOhB,EAAMc,MAAM,KAAOE,MAE3ChB,EAAMc,QACZM,EAAU,CAACpB,EAAMc,MAAN,YAGN,mBAAGD,UAAWO,EAAQE,KAAK,KAA3B,SACJJ,EAAEN,SAASG,KAAI,SAAAC,GAAC,OAAE,cAAC,EAAD,CAAoBL,QAASK,EAAGF,MAAOd,EAAMc,cAIvDS,EAAiB,SAACvB,GAAW,IAAD,EACbC,aADa,mBAChCa,EADgC,KACzBU,EADyB,KAIjCC,EAAaxB,WAAc,8BAAUyB,0BAAgB1B,EAAMW,YAAW,CAACX,EAAMW,UAC7ER,EAAQF,WAAc,kBAAM0B,eAAgB3B,EAAMG,MAAOH,EAAM4B,WAAU,CAAC5B,EAAMG,MAAOH,EAAM4B,UAEzEH,EAAWV,KAAI,SAAAG,GAAC,OAAEC,2BAAiBD,EAAGf,MAEhE,OAAQ,qCACJ,cAAC,EAAD,CAAyBA,MAAOA,EAAOG,eAAgBkB,IACtDC,EAAWV,KAAI,SAACG,EAAGW,GAAJ,OAAQ,cAAC,EAAD,CAA8BlB,QAASO,EAAGf,MAAOA,EAAOW,MAAOA,GAApCe,UCW1CC,MAxBf,WAAgB,IAAD,EACiB7B,WAhDf,wqBA+CF,mBACNU,EADM,KACGoB,EADH,OAEa9B,WA5BV,uTA0BH,mBAENE,EAFM,KAEC6B,EAFD,KAIb,OACE,sBAAKnB,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,yCACA,0BAAUA,UAAU,SAASoB,MAAOtB,EAASuB,SAAU,SAAAC,GAAC,OAAEJ,EAAWI,EAAEC,OAAOH,aAEhF,sBAAKpB,UAAU,QAAf,UACE,uCACA,0BAAUA,UAAU,SAASoB,MAAO9B,EAAO+B,SAAU,SAAAC,GAAC,OAAEH,EAASG,EAAEC,OAAOH,gBAG9E,qBAAKpB,UAAU,UAAf,SACE,cAAC,EAAD,CAAgBF,QAASA,EAASR,MAAOA,UChEjDkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASiC,eAAe,W","file":"static/js/main.1e751fe4.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as wm from 'writers-mark';\nimport { createStyleElement } from 'writers-mark-dom';\n\nimport { Block, SpanSection, splitParagraphs, compileParagraph } from 'writers-mark/lib/ast';\n\n\nconst WritersMarkRuleInjector = (props) => {\n  React.useEffect(() => {\n    const [sheet, newRules] = createStyleElement(props.style);\n    props.onRulesChanged(newRules);\n\n    return () => {\n      document.head.removeChild(sheet);\n    };\n  }, [props.style]);\n\n  return <></>\n}\n\nconst WritersMarkSection = (props) => {\n  if (props.content.contents && props.content.style) {\n    let className = '';\n    if (props.rules) {\n      className = props.rules['s_' + props.content.style];\n    }\n\n    return (\n      <span className={className}>\n        {props.content.contents.map(s=><WritersMarkSection content={s} rules={props.rules}/>)}\n      </span>\n    );\n  } else {\n    return props.content;\n  }\n}\n\nconst WritersMarkParagraph = (props) => {\n  const p = React.useMemo(()=>compileParagraph(props.content, props.style), [props.style, props.content])\n\n  let classes = [];\n  if (props.rules && p.styles) {\n    classes = p.styles.map((s) => props.rules['p_' + s]);\n  }\n  else if(props.rules){\n    classes = [props.rules['p_default']]\n  }\n  \n  return <p className={classes.join(' ')}>\n    {p.contents.map(s=><WritersMarkSection content={s} rules={props.rules}/>)}\n  </p>\n}\n\nexport const WritersMarkRaw = (props) => {\n  const [rules, setRules] = React.useState();\n\n  // Perform a two-stage compilation. This way paragraphs that do not change do not need to be recompiled.\n  const paragraphs = React.useMemo(() => [...splitParagraphs(props.content)], [props.content]);\n  const style = React.useMemo(() => wm.compileStyle(props.style, props.options), [props.style, props.options]);\n\n  const ast = { paragraphs: paragraphs.map(p=>compileParagraph(p, style)) };\n\n  return (<>\n      <WritersMarkRuleInjector style={style} onRulesChanged={setRules}/>\n      {paragraphs.map((p, i)=><WritersMarkParagraph key={i} content={p} style={style} rules={rules}/>)}\n    </>\n  )\n};\n","import './App.css';\nimport * as React from 'react'\nimport {WritersMarkRaw} from './tmp'\n\nconst defaultText = `#\nWelcome to Writer's Mark!\n\n##\nIntroduction\n\nIt's kinda like markdown, but a lot more flexible.\n\n##\nExamples:\n\nLorem ipsum dolor sit amet, *consectetur* adipiscing elit. \nVivamus mollis ante metus, eu commodo risus commodo quis. \nUt eu fringilla tortor, vel interdum ligula. Proin nec \ntortor vel leo interdum vestibulum eu ac nibh. \n\n__aside__\nPellentesque mollis nisi nunc, vestibulum varius metus pharetra rutrum. Praesent ut elit magna. Nulla enim nunc, facilisis vel nisi quis, mollis ullamcorper augue. Phasellus accumsan, nunc in vulputate malesuada, diam ipsum pulvinar massa.\n\nFusce sit [i]amet ipsum accumsan[/i], molestie eros ut, mattis orci. .`\n\nconst defaultStyle = `p default {\n  margin-left: 32px;\n}\n\np # {\n  font-size: 1.5em;\n  margin-left: 32px;\n}\n\np ## {\n  font-size: 1.2em;\n  font-weight: bold;\n  margin-left: 32px;\n}\n\np __aside__ {\n  margin-left: 64px;\n  font-family: monospace;\n}\n\ns * {font-weight:bold;}\n\ns [i] [/i] {\n  font-style: italic;\n}`\n\nfunction App() {\n  const [content, setContent] = React.useState(defaultText);\n  const [style, setStyle] = React.useState(defaultStyle);\n\n  return (\n    <div className=\"App\">\n      <div className=\"Authoring\">\n        <div className=\"Content\">\n          <h3>Content</h3>\n          <textarea className=\"Editor\" value={content} onChange={e=>setContent(e.target.value)}></textarea >\n        </div>\n        <div className=\"Style\">\n          <h3>Style</h3>\n          <textarea className=\"Editor\" value={style} onChange={e=>setStyle(e.target.value)}></textarea >\n        </div>\n      </div>\n      <div className=\"Display\">\n        <WritersMarkRaw content={content} style={style}/>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}