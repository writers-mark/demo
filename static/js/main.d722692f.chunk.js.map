{"version":3,"sources":["App.js","index.js"],"names":["App","React","content","setContent","style","setStyle","cssProps","className","value","onChange","e","options","whitelist","para","span","cont","text","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAsGeA,MA9Bf,WAAgB,IAAD,EACiBC,WArEf,4tCAoEF,mBACNC,EADM,KACGC,EADH,OAEaF,WAhCV,gYA8BH,mBAENG,EAFM,KAECC,EAFD,KAIPC,EAAW,CAAC,QAAS,YAAa,cAAe,aAAc,QAAS,mBAAoB,SAAU,eAE5G,OACE,sBAAKC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,UAAf,UACE,yCACA,0BAAUA,UAAU,SAASC,MAAON,EAASO,SAAU,SAAAC,GAAC,OAAEP,EAAWO,SAEvE,sBAAKH,UAAU,QAAf,UACE,uCACA,0BAAUA,UAAU,SAASC,MAAOJ,EAAOK,SAAU,SAAAC,GAAC,OAAEL,EAASK,YAGrE,qBAAKH,UAAU,UAAf,SACE,cAAC,kBAAD,CAAiBI,QAAS,CAACC,UAAW,CAACC,KAAMP,EAAUQ,KAAMR,EAAUS,KAAMT,IAA7E,SACE,cAAC,gBAAD,CAAeU,KAAMZ,EAArB,SACE,cAAC,cAAD,CAAaY,KAAMd,cCzF/Be,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d722692f.chunk.js","sourcesContent":["import './App.css';\nimport * as React from 'react'\nimport {WritersMark, StyleProvider, ContextProvider} from 'writers-mark-react'\n\nconst defaultText = `#\nWelcome to Writer's Mark!\n\n##\nIntroduction\n\nIt's kinda like markdown, but a lot more flexible. It's also a lot safer, since arbitrary HTML cannot be injected, and links are prohibited. Feel free to poke around the text and/or the style to see what you can do!\n\nOnly CSS properties that have been explicitely whitelisted are available. For this demo, you can use: +font-size+, +font-family+, +font-style'+, +color+, +background-color+, +margin+ or +margin-left+\n\n##\nExamples:\n\nParagraphs are blocks of text.\nThey can be written accross multiple lines\nor on one single long line. \n\nAn empty line of text separates paragraphs\n\n!sample_para_rule!\nYou can style a paragraph by prepending it with the name of a \"para\" rule.\n\nYou can style span of text, like *this* by wrapping them around a span rule's name.\n\nAlternatively, span rules can have [i]different beginning and ends[/i].\n\n__aside__\nStyles can also be added directly in the text (at the top or bottom of the document).\nNote that the --- mark needs to be either the very first or very last line of the document.\nTry adding a blank line at the bottom, and see what happens.\n\n---\npara __aside__ {\n  margin-left: 64px;\n  font-family: monospace;\n}\n---`;\n\nconst defaultStyle = `para # {\n  font-size: 1.5em;\n  margin-left: 32px;\n}\n\npara ## {\n  font-size: 1.2em;\n  font-weight: bold;\n  margin-left: 32px;\n}\n\npara !sample_para_rule! {\n  margin-left: 32px;\n  margin-right: 32px;\n  background-color: black;\n  color: white;\n}\n\nspan * {\n  font-weight:bold;\n}\n\nspan + {\n  font-family: monospace;\n}\n\nspan [i] [/i] {\n  font-style: italic;\n}`;\n\nfunction App() {\n  const [content, setContent] = React.useState(defaultText);\n  const [style, setStyle] = React.useState(defaultStyle);\n\n  const cssProps = [\"color\", 'font-size', 'font-family', 'font-style', 'color', 'background-color', 'margin', 'margin-left']\n\n  return (\n    <div className=\"App\">\n      <div className=\"Authoring\">\n        <div className=\"Content\">\n          <h3>Content</h3>\n          <textarea className=\"Editor\" value={content} onChange={e=>setContent(e)}></textarea >\n        </div>\n        <div className=\"Style\">\n          <h3>Style</h3>\n          <textarea className=\"Editor\" value={style} onChange={e=>setStyle(e)}></textarea >\n        </div>\n      </div>\n      <div className=\"Display\">\n        <ContextProvider options={{whitelist: {para: cssProps, span: cssProps, cont: cssProps}}}>\n          <StyleProvider text={style}>\n            <WritersMark text={content}/>\n          </StyleProvider>\n        </ContextProvider>\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}